1.	Enunț: O expresie este o sumă (+) a unui sau mai multe produse (*) pentru unul sau mai multe numere, cu spațiu opțional între ele.
		Scrieți o funcție care citește expresia din input și îi calculează valoarea.

	Imagine: Va trebui sa scriem o functie de prelucrare (si eventual o functie ce va elimina spatiile), care in primul rand va transforma caracterele in tipuri int pentru a putea efectua operatiile de inmultire (*) si adunare (+) si una de citire pe caractere.

	Explicatii: 
		Functia de citire : void citire(char *ex, int *i) -> va prelua din main sirul de caractere aferent (char *ex) si un contor (*i). Se va declara un char c, care va prelua valoarea functiei getchar() (prin expresia c = getchar(c)), ce are rolul de a citi caracterele din string date de la tastatura. Cat timp, c nu este declarat ca "linie noua" (while(c!=10){..}, primim valoarea lui c in ex[*i], pentru a ne putea construi sirul si mergem mai departe la urmatorul caracter prin comanda (*i)++;

		Functia de eliminare a spatiilor: Pentru a ne asigura ca functia de prelucrare nu va lua in considerare spatiile in obtinerea rezultatului cerut, vom declara functia void elimina(char *ex1, char*ex2), care va prelua sirul de caractere deja citit si va returna versiunea acestuia fara spatii (ex2). Ne vom declara 2 contoare (pentru fiecare sir), iar apoi, parcurgem ex1 pana la caracterul nul (while(ex1[i]!=0). Cat timp nu avem spatiu, (if(ex1[i] != ' '), memoram caracterul in noul sir de caractere ex2[j] = ex1[i] si facem loc pentru urmatorul caracter (j++). Apoi, mergem mai departe (i++). La sfarsit, odata ce am finalizat construirea noului sir, introducem terminatorul ex2[j] = 0;
 
		Functia de prelucrare: Va calcula efectiv valorile produselor, ca apoi sa le adune si sa ajungem la rezultatul final. Aceasta va prelua un sir de caractere (int prelucreaza(char *ex), vom apela in asa fel incat sa il prelueze pe ex2. Ne vom declara un contor pentru parcurgerea sirului (int i = 0) si o suma pe care de asemenea o vom initializa cu 0 (int s = 0). Cat timp caracterul este o cifra (while(isdigit(ex[i])), vom converti caracterul in tipul int prin efectuarea operatiei (ex[i] - '0') si il vom introduce la coada nr = nr*10 + (ex[i] - '0'), i++ ca sa mergem mai departe. Daca caracterul nu e cifra, inseamna ca am gasit un numar si deci vom calcula produsul, pe care l am initializat cu 1 mai sus. p = p*nr. Mergem mai departe cu i++; Toate acestea cat timp caracterul din spate ex[i-1] == *, pentru a ne asigura ca produsul se face intre 2 numere.  s = s+p calculeaza suma dintre produse, while(ex[i-1] == '+), pentru a ne asigura ca programul trece la urmatorul caracter si NU se opreste. 



2.	Enunt:  Scrieti o functie in C care preia un numar de tip unsigned de 64 de biti si returneaza numarul format din ultima cifra a marimilor subsirurilor adiacente de biti identici din argument.

	Imagine: Ne vom declara doua numere in hexa a si m care vor indeplini conditiile si le vom compara folosind operatori pe biti

	Explicatii:
		Ne vom declara de asemenea un unsigned long long r  pe care il vom egala cu a & m si un contor ce il vom initializa c = 0. Apoi, folosind o structura de tip while((a&m-r) == 0) si siftand dupa fiecare verificare la dreapta pe a cu 1 a >> 1, ne vom putea da seama cati biti sunt identici. La final, vom afisa c%10.


3.	Enunt: Scrieti o functie C care preia un sir de caractere si o lista de caractere-separatori si returneaza un sir de copii de "cuvinte" (cu terminator nul) gasite in input. Consideram un "cuvant" un sir de caractere delimitat de oricefel de caracter din lista de separatori. FARA STRTOK.
	
	Imagine: Ne va trebui o functie separata care va verifica pentru fiecare caracter daca acesta este sau nu un separator, iar apoi vom parcurge sirul de caractere intr-o alta functie, unde vom memora intr-un buffer "cuvintele".

	Explicatii: 
		Functia esteSeparator de tip int va returna 1 sau 0 (fals/adevarat). Aceasta va prelua caracterul care se afla in discutie (vom apela pentru fiecare caracter in parte aceasta functie) si char *s, pointer catre sirul de separatori preluat (declarat in functia main). Vom parcurge sirul cu ajutorul expresiei for(int i = 0; i<strlen(s); i++) // Adica, parcurgem pana la ultimul caracter (strlen este lungimea maxima a sirului de caractere). Daca caracterul in discutie este egal cu unul dintre caracterele din sirul de separatori (s[i] = c) atunci functia returneaza 1/adevarat, iar daca nu returneaza 0/fals.
		In main, ne vom declara sirurile de caractere (atat cel din input cat si sirul de separatori luati arbitrar), bufferul in care ne vom stoca cuvintele si un tablou de pointeri pentru a le stoca in memorie dinamic si desigur, contoare pentru fiecare, pe care le initializam cu 0 (i, j, k). Prin instructiunea while(t[i]!=0) parcurgem sirul de caractere dat. Daca caracterul este separator, aflam prin apelarea functiei descrise mai sus: if(este Separator(t[i], s)), atunci, inseamna ca am terminat parcurgerea unui cuvant intreg, duplicam bufferul de cuvinte w si il inregistram in tabela de rezultate v prin strdup(w). Desigur, alocam spatiu apoi in tabela prin incrementarea contorului k++. Apoi, resetam buffer ul de lucru w[0] = 0;/ j = 0; In cazul in care nu avem un separator, caracterul analizat se adauga in bufferul w, iar apoi pe urmatoarea pozitie punem caracterul nul w[j+1] = 0. Dupa parcurgerea ambelor cazuri, mergem la urmatorul caracter prin i++. La final afisam tabloul de pointeri la caractere printr-un for. 
	
4.	Enunt: Scrieti o functie care primeste ca argument un file path catre un fiser Unix de parole (cu structura descrisa mai jos) si care printeaza lista de grupuri-unix in ordine descrescatoare numarul utilizatorilor asociati cu acele grupuri.
		Exemplu: Username:X:UserId:GroupId:EXTRA_FIELDS unde trebuie sa folositi GroupId pentru a identifica grupul pentru care fiecare UserName ii este asociat. Putem asuma numar maxim de randuri in fisier.
 
	Imagine: Vom folosi o structura de date pentru a putea asocia fiecarui grup un nume (Username) si o dimensiune. Vom citi apoi linie dupa linie, din fisier, pe caractere, vom separa cuvintele de separatori (prin inserarea cuvintelor intr-un buffer separat) (in special ':'), iar apoi vom cauta numele din sirul de cuvinte.
	Explicatii: 
		Ne declaram o scructura de date (struct grup) care sa retina un nume (char nume[100]) si dimensiunea (int dimensiune). Apoi, scriem o functie care sa realizeze citirea din fisier si unde ne vom declara si un sir de tip struct grup grupuri[100], cu ajutorul caruia vom putea identifica fiecare tip de cuvant. Deschidem fisierul prin comanda f = fopen(s, "rt") , unde s este fisierul dat: "passwd.txt". Daca nu exista fisierul (if(f == NULL)), atunci printam "Eroare la intrare" cu printf. Incepem ulterior citirea pe linii prin fgets(buf, sizeof(buf), f), unde buf este bufferul pt caractere.  (char buf[80];). Cat timp se citeste din fisier while(fgets(buf, sizeof(buf), f). int i este contor pentru buffer. int c este variabila de stare pentru camprui de pe o linie. ne declaram un tablou pentru campuri de pe o linie char w[100] si contorul sau int j = 0; Parcurgem linia caracter dupa caracter while (buf[i]!= :) Cat timp nu e : memoram un camp w[j] = buf[i] si w[j+1] = 0, pentru a introduce terminatorul j++ ca sa ne deplasam la urmatoarea pozitie.    	
      



